local function decode_strings(encoded, mapping)
    local decoded = {}
    for _, str in ipairs(encoded) do
        local result = ""
        local num = 0
        local shift = 0
        for i = 1, #str do
            local char = str:sub(i, i)
            if mapping[char] then
                num = num + mapping[char] * (2 ^ (3 - shift))
                shift = shift + 1
                if shift == 4 then
                    result = result .. string.char(math.floor(num / 64), math.floor((num % 64) / 8), num % 8)
                    num = 0
                    shift = 0
                end
            elseif char == "1" then
                result = result .. string.char(math.floor(num / 64))
                break
            end
        end
        decoded[#decoded + 1] = result
    end
    return decoded
end

local function execute_decoded(decoded)
    -- Placeholder for executing decoded strings
    -- This could involve calling functions, setting metatables, or processing data
    return function(...)
        return "Processed result"
    end
end

-- Example usage
local mapping = {
    ["0"] = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3, ["4"] = 4, ["5"] = 5,
    ["6"] = 6, ["7"] = 7, ["8"] = 8, ["9"] = 9, ["/"] = 10, ["+"] = 11,
    ["-"] = 12, ["*"] = 13
}
local encoded = {"051075119102054075084051121075101081119114110100", "115085077080121116119122073099081050121100061061"}
local decoded = decode_strings(encoded, mapping)
local result = execute_decoded(decoded)
print(result())
