local converted_code = [[
return (function(...)
    local C = {
        "\051\075\119\102\054\075\084\051\121\075\101\081\119\114\110\100",
        "\115\085\077\080\121\116\119\122\073\099\081\050\121\100\061\061",
        -- ... (keep all original strings)
        "\084\084\083\051"
    }
    local function P(P) return C[P + 63643] end
    for P, V in ipairs({
        {1, 53}, {-1, -42}, {43, -53}
    }) do
        while V[1] < V[2] do
            C[V[1]], C[V[2]], V[1], V[2] = C[V[2]], C[V[1]], V[1] + 1, V[2] - 1
        end
    end
    do
        local P = string.len
        local V = table.insert
        local g = math.floor
        local r = type
        local b = string.char
        local z = C
        local j = string.sub
        local H = table.concat
        local p = {
            I = 28, ["+"] = 59, ["2"] = 46, ["1"] = 12, k = 51, O = 10,
            -- ... (simplified mapping table, compute values from original)
            a = 58
        }
        for C = 1, #z, 1 do
            local I = z[C]
            if r(I) == "string" then
                local r = P(I)
                local k = {}
                local n = 1
                local i = 0
                local A = 0
                while n <= r do
                    local C = j(I, n, n)
                    local P = p[C]
                    if P then
                        i = i + P * (64 ^ (4 - A))
                        A = A + 1
                        if A == 4 then
                            A = 0
                            local C = g(i / 65536)
                            local P = g((i % 65536) / 256)
                            local r = i % 256
                            V(k, b(C, P, r))
                            i = 0
                        end
                    elseif C == "1" then
                        V(k, b(g(i / 65536)))
                        if n >= r or j(I, n + 1, n + 1) ~= "1" then
                            V(k, b(g((i % 65536) / 256)))
                        end
                        break
                    end
                    n = n + 1
                end
                z[C] = H(k)
            end
        end
    end
    -- Placeholder for complex state machine
    return (function(C, g, r, b, z, j, H, k, Y, a, A, Q, s, p, n, w, V, i, I, d)
        -- Simplified logic (needs full deobfuscation)
        return g(H)
    end)(getfenv and getfenv() or _ENV, table.unpack, newproxy, setmetatable, getmetatable, select, {...})
end)(...)
]]

-- Test locally (in a safe environment)
-- loadstring(converted_code)()
